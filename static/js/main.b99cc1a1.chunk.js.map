{"version":3,"sources":["assets/niall.png","screens/home/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","useStyles","makeStyles","theme","home","height","title","fontWeight","info","display","justifyContent","alignItems","flexDirection","niallImageContainer","niallImage","width","buttonLink","margin","spacing","Home","classes","react_default","a","createElement","Grid","container","component","className","CssBaseline","item","xs","md","Container","Typography","variant","color","style","marginBottom","Divider","marginTop","href","IconButton","react_fontawesome_index_es","icon","size","src","library","add","fab","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4SCalCC,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,OAAQ,SAEVC,MAAO,CACLC,WAAY,KAEdC,KAAM,CACJC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,cAAe,UAGjBC,oBAAqB,CACnBR,OAAQ,QACRI,QAAS,OACTC,eAAgB,WAChBC,WAAY,YAEdG,WAAY,CACVC,MAAO,QAETC,WAAY,CACVC,OAAQd,EAAMe,QAAQ,OAoCXC,EAhCF,WACX,IAAMC,EAAUnB,IAEhB,OACEoB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,OAAOC,UAAWP,EAAQhB,MAClDiB,EAAAC,EAAAC,cAACK,EAAA,EAAD,MACAP,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGJ,UAAWP,EAAQZ,MAC3Ca,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACEX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAYC,QAAQ,KAAKR,UAAU,KAAKS,MAAM,UAAUC,MAAO,CAACC,aAAc,KAA9E,WACUhB,EAAAC,EAAAC,cAAA,QAAMI,UAAWP,EAAQd,OAAzB,iBAEVe,EAAAC,EAAAC,cAACe,EAAA,EAAD,MACAjB,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,UAAUC,MAAO,CAACG,UAAW,GAAIhC,WAAY,IAAK8B,aAAc,KAA/F,2CAC0ChB,EAAAC,EAAAC,cAAA,KAAGa,MAAO,CAACD,MAAO,WAAYK,KAAK,0BAAnC,mBAD1C,2PACiXnB,EAAAC,EAAAC,cAAA,KAAGa,MAAO,CAACD,MAAO,WAAYK,KAAK,iCAAnC,0BADjX,KAGAnB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAYD,KAAK,6BAA6BN,QAAQ,YAAYP,UAAWP,EAAQJ,YACnFK,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAiBC,KAAM,CAAC,MAAO,UAAWC,KAAK,QAEjDvB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAYD,KAAK,sCAAsCN,QAAQ,YAAYP,UAAWP,EAAQJ,YAC5FK,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAiBC,KAAM,CAAC,MAAO,YAAaC,KAAK,WAKzDvB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMK,MAAI,EAACC,IAAI,EAAOC,GAAI,EAAGJ,UAAWP,EAAQP,qBAC9CQ,EAAAC,EAAAC,cAAA,OAAKsB,IAAK/B,IAAYa,UAAWP,EAAQN,gBC7DjDgC,IAAQC,IAAIC,KAWGC,MARf,WACE,OACE5B,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAACnB,EAAD,QCAc8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b99cc1a1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/niall.0d8f9540.png\";","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Container from '@material-ui/core/Container';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport niallImage from 'assets/niall.png'\n\nconst useStyles = makeStyles(theme => ({\n  home: {\n    height: '100vh',\n  },\n  title: {\n    fontWeight: 400\n  },\n  info: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column'\n\n  },\n  niallImageContainer: {\n    height: '100vh',\n    display: 'flex',\n    justifyContent: 'flex-end',\n    alignItems: 'flex-end',\n  },\n  niallImage: {\n    width: '100%'\n  },\n  buttonLink: {\n    margin: theme.spacing(1),\n  },\n}))\n\nconst Home = () => {\n  const classes = useStyles();\n\n  return (\n    <Grid container component=\"main\" className={classes.home}>\n      <CssBaseline />\n      <Grid item xs={12} md={7} className={classes.info}>\n        <Container>\n          <Typography variant=\"h1\" component=\"h5\" color=\"inherit\" style={{marginBottom: 40}}>\n            Hi, I'm <span className={classes.title}>Niall Curtis</span>\n          </Typography>\n          <Divider />\n          <Typography variant=\"h6\" color=\"inherit\" style={{marginTop: 40, fontWeight: 300, marginBottom: 30}}>\n            Software developer currently working at <a style={{color: 'inherit'}} href=\"https://simplydo.co.uk\">Simply Do Ideas</a>. Experienced in planning and delivering full-stack web and mobile applications, using the latest technologies without compromising on quality. Work regularly with Javascript (ES6), React, Python, Serverless, and many more. Contact me via email at <a style={{color: 'inherit'}} href=\"mailto:niallycurtis@gmail.com\">niallycurtis@gmail.com</a>.\n          </Typography>\n          <div>\n            <IconButton href=\"https://github.com/xniallc\" variant=\"contained\" className={classes.buttonLink}>\n              <FontAwesomeIcon icon={['fab', 'github']} size=\"2x\"  />\n            </IconButton>\n            <IconButton href=\"https://linkedin.com/in/niallcurtis\" variant=\"contained\" className={classes.buttonLink}>\n              <FontAwesomeIcon icon={['fab', 'linkedin']} size=\"2x\"  />\n            </IconButton>\n          </div>\n        </Container>\n      </Grid>\n      <Grid item xs={false} md={5} className={classes.niallImageContainer}>\n        <img src={niallImage} className={classes.niallImage} />\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default Home","import React from 'react';\nimport './App.css';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport Home from './screens/home'\n\nlibrary.add(fab)\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}